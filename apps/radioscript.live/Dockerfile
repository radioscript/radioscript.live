# استفاده از Node.js نسخه 22 به عنوان تصویر پایه
# این تصویر از Alpine Linux استفاده می‌کند که بسیار سبک است.
FROM node:22-alpine AS builder

# تنظیم دایرکتوری کار داخل کانتینر
# تمام دستورات بعدی در این دایرکتوری اجرا می‌شوند.
WORKDIR /app

# کپی فایل‌های مورد نیاز برای نصب وابستگی‌ها (dependencies)
# این فایل‌ها شامل package.json و فایل‌های قفل (lock files) هستند.
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./

# نصب وابستگی‌ها با استفاده از npm install -f
# دستور -f یا --force برای نصب اجباری وابستگی‌ها استفاده می‌شود.
# این دستور مشکلات احتمالی وابستگی‌ها را نادیده می‌گیرد.
RUN npm install -f

# کپی تمام فایل‌های پروژه به داخل کانتینر
# این شامل کدهای منبع، فایل‌های پیکربندی و سایر فایل‌های لازم است.
COPY . .

# ساخت پروژه با دستور npm run build-web
# این دستور پروژه را بیلد می‌کند و خروجی در فولدر dist/radioscript.live قرار می‌گیرد.
RUN npm run build

# استفاده از یک تصویر سبک‌تر برای اجرای پروژه
# این مرحله از یک تصویر جدید استفاده می‌کند تا حجم نهایی Image کاهش یابد.
FROM node:22-alpine AS runner

# تنظیم دایرکتوری کار برای مرحله اجرا
WORKDIR /app

# کپی فایل‌های بیلد شده از مرحله builder به دایرکتوری جاری
# این فایل‌ها شامل فولدر .next، public و سایر فایل‌های ضروری هستند.
COPY --from=builder /app/dist/radioscript.live ./dist/radioscript.live

# تغییر دایرکتوری کار به فولدر پروژه بیلد شده
WORKDIR /app/dist/radioscript.live

# نصب وابستگی‌های ضروری برای اجرای پروژه در محیط production
# دستور --production فقط وابستگی‌های ضروری (بدون devDependencies) را نصب می‌کند.
# دستور -f برای نصب اجباری استفاده می‌شود.
RUN npm install --production -f

# باز کردن پورت 3000 برای دسترسی به پروژه
# این پورت باید با پورتی که پروژه روی آن اجرا می‌شود مطابقت داشته باشد.
EXPOSE 3000

# دستور اجرای پروژه
# این دستور پروژه را با استفاده از npm start اجرا می‌کند.
CMD ["npm", "start"]